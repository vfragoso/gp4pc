// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//
// Generalized Pose-and-Scale Estimation using 4-Point Congruence Constraints
//
// Victor Fragoso and Sudipta Sinha.
// In Proc. of the IEEE International Conf. on 3D Vision (3DV) 2020.
//
// Please contact the author of this library if you have any questions.
// Author: Victor Fragoso (victor.fragoso@microsoft.com)

#include <math/solve_gp4pc_polynomial.h>

#include <array>
#include <Eigen/Dense>
#include <Eigen/Sparse>
#include <Eigen/SparseLU>
#include <Eigen/SparseQR>
#include <Eigen/OrderingMethods>
#include <Eigen/Eigenvalues>

namespace msft {

// Solves for the gP4P+s problem using congruency of tetrahedrons.
// Params:
//   coeff_mat:  Coefficient matrix. Must be 4 x 15 matrix.
Eigen::MatrixXcd SolveGp4pcPolynomial(const Eigen::MatrixXd& coeff_mat) {
  using Eigen::MatrixXd;
  using Eigen::MatrixXcd;

  static const int C_ind[] = {
    0, 3, 97, 98, 99, 100, 137, 194, 195, 196, 197, 234, 292, 293, 331, 388,
    392, 394, 396, 397, 485, 486, 489, 490, 491, 493, 494, 525, 583, 586, 587,
    590, 591, 682, 683, 685, 686, 688, 778, 780, 781, 783, 816, 880, 881, 882,
    980, 983, 1077, 1078,
    1079, 1080, 1108, 1174, 1175, 1176, 1177, 1205, 1272, 1273, 1302, 1372,
    1375, 1454, 1465, 1469, 1470, 1471, 1472, 1494, 1551, 1562, 1563, 1566,
    1567, 1568, 1569, 1591, 1593, 1648, 1660, 1664, 1665, 1688, 1746, 1752,
    1760, 1764, 1766, 1768, 1769, 1842, 1843, 1844, 1848, 1849, 1856, 1857,
    1858, 1861,
    1862, 1863, 1865, 1866, 1882, 1941, 1945, 1952, 1955, 1959, 1960, 1962,
    1963, 1981, 2040, 2041, 2043, 2044, 2054, 2055, 2058, 2059, 2060, 2133,
    2136, 2138, 2139, 2141, 2150, 2153, 2155, 2156, 2173, 2238, 2239, 2251,
    2252, 2254, 2352, 2355, 2370, 2435, 2449, 2450, 2451, 2452, 2463, 2467,
    2532, 2533,
    2546, 2547, 2548, 2549, 2560, 2564, 2630, 2644, 2645, 2657, 2730, 2734,
    2740, 2744, 2746, 2748, 2749, 2758, 2826, 2827, 2828, 2831, 2832, 2837,
    2839, 2841, 2842, 2843, 2845, 2846, 2851, 2922, 2925, 2929, 2936, 2939,
    2940, 2942, 2943, 3010, 3013, 3024, 3025, 3028, 3029, 3034, 3035, 3037,
    3038, 3040,
    3049, 3106, 3109, 3120, 3123, 3125, 3126, 3129, 3133, 3134, 3135, 3142,
    3208, 3209, 3221, 3222, 3232, 3233, 3234, 3322, 3326, 3332, 3333, 3334,
    3408, 3419, 3421, 3423, 3424, 3429, 3430, 3431, 3504, 3518, 3521, 3526,
    3527, 3528, 3606, 3607, 3616, 3617, 3619, 3620, 3624, 3625, 3626, 3702,
    3705, 3711,
    3715, 3716, 3717, 3721, 3723, 3803, 3804, 3814, 3815, 3817, 3819, 3820,
    3907, 3908, 3915, 3917, 4002, 4006, 4012, 4014, 4105, 4106, 4108, 4111,
    4214, 4217, 4311, 4312, 4313, 4314, 4340, 4408, 4409, 4410, 4411, 4437,
    4506, 4507, 4534, 4606, 4608, 4654, 4699, 4703, 4704, 4705, 4706, 4712,
    4751, 4796,
    4797, 4800, 4801, 4802, 4803, 4809, 4825, 4848, 4894, 4898, 4900, 4906,
    4947, 4950, 4953, 4994, 4998, 4999, 5000, 5002, 5042, 5044, 5045, 5046,
    5047, 5049, 5050, 5084, 5090, 5091, 5094, 5095, 5096, 5097, 5099, 5100,
    5110, 5142, 5143, 5146, 5181, 5186, 5191, 5192, 5194, 5196, 5207, 5213,
    5238, 5241,
    5242, 5244, 5245, 5246, 5247, 5287, 5290, 5291, 5292, 5293, 5333, 5336,
    5337, 5339, 5340, 5342, 5343, 5344, 5375, 5383, 5388, 5389, 5391, 5401,
    5436, 5439, 5440, 5441, 5483, 5486, 5487, 5586, 5600, 5622, 5636, 5639,
    5669, 5683, 5684, 5685, 5686, 5697, 5719, 5733, 5734, 5735, 5736, 5764,
    5766, 5767,
    5780, 5781, 5782, 5783, 5794, 5816, 5831, 5832, 5861, 5864, 5878, 5879,
    5880, 5931, 5934, 5935, 5964, 5969, 5978, 5979, 5982, 5988, 6008, 6010,
    6013, 6024, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6053, 6060, 6061,
    6064, 6066, 6073, 6074, 6075, 6076, 6077, 6079, 6080, 6085, 6105, 6110,
    6122, 6123,
    6126, 6127, 6130, 6150, 6152, 6156, 6161, 6170, 6172, 6173, 6174, 6177,
    6202, 6208, 6211, 6214, 6222, 6225, 6226, 6228, 6229, 6230, 6231, 6257,
    6260, 6261, 6262, 6265, 6270, 6272, 6273, 6299, 6301, 6304, 6306, 6307,
    6310, 6320, 6321, 6324, 6325, 6326, 6327, 6328, 6344, 6353, 6358, 6359,
    6363, 6365,
    6368, 6369, 6371, 6396, 6406, 6409, 6410, 6422, 6423, 6424, 6425, 6453,
    6456, 6463, 6464, 6466, 6523, 6526, 6527, 6541, 6564, 6566, 6567, 6568,
    6570, 6606, 6609, 6620, 6621, 6622, 6623, 6624, 6625, 6634, 6638, 6642,
    6655, 6659, 6661, 6663, 6664, 6665, 6667, 6704, 6705, 6718, 6719, 6722,
    6731, 6738,
    6752, 6756, 6760, 6761, 6762, 6804, 6807, 6808, 6814, 6817, 6818, 6820,
    6821, 6822, 6823, 6832, 6839, 6842, 6847, 6854, 6855, 6858, 6859, 6860,
    6881, 6902, 6903, 6906, 6912, 6913, 6916, 6917, 6918, 6919, 6920, 6925,
    6935, 6945, 6950, 6951, 6953, 6956, 6957, 6978, 7004, 7005, 7006, 7014,
    7015, 7016,
    7017, 7035, 7038, 7045, 7048, 7051, 7052, 7054, 7154, 7163, 7173, 7221,
    7224, 7251, 7252, 7253, 7254, 7260, 7270, 7318, 7319, 7320, 7321, 7347,
    7348, 7349, 7350, 7351, 7357, 7367, 7416, 7417, 7444, 7446, 7447, 7448,
    7516, 7518, 7521, 7546, 7548, 7550, 7551, 7561, 7563, 7564, 7609, 7612,
    7613, 7614,
    7615, 7616, 7618, 7622, 7632, 7641, 7642, 7643, 7644, 7645, 7647, 7648,
    7660, 7661, 7707, 7708, 7711, 7713, 7719, 7729, 7735, 7739, 7740, 7741,
    7742, 7744, 7760, 7763, 7766, 7807, 7809, 7811, 7812, 7813, 7814, 7815,
    7833, 7837, 7840, 7841, 7852, 7854, 7855, 7858, 7859, 7862, 7897, 7905,
    7907, 7908,
    7910, 7911, 7912, 7913, 7923, 7931, 7932, 7935, 7937, 7938, 7958, 7961,
    7962, 7963, 8005, 8007, 8008, 8009, 8031, 8033, 8034, 8108, 8116, 8122,
    8133, 8134, 8135, 8136, 8144, 8145, 8158, 8161, 8191, 8194, 8205, 8206,
    8207, 8208, 8211, 8213, 8219, 8224, 8226, 8230, 8231, 8232, 8233, 8241,
    8242, 8256,
    8257, 8286, 8289, 8290, 8303, 8304, 8305, 8308, 8321, 8323, 8328, 8329,
    8330, 8356, 8359, 8360, 8389, 8391, 8394, 8399, 8403, 8404, 8406, 8407,
    8413, 8415, 8422, 8423, 8425, 8427, 8428, 8433, 8435, 8436, 8438, 8512,
    8521, 8526, 8527, 8528, 8531, 8533, 8579, 8582, 8609, 8610, 8611, 8612,
    8614, 8618,
    8623, 8624, 8625, 8628, 8630, 8677, 8678, 8705, 8707, 8708, 8709, 8711,
    8720, 8721, 8722, 8777, 8779, 8782, 8803, 8807, 8809, 8810, 8811, 8812,
    8817, 8819, 8820, 8822, 8824, 8825, 8851, 8854, 8855, 8861, 8862, 8863,
    8864, 8884, 8892, 8896, 8897, 8939, 8940, 8943, 8963, 8972, 8974, 8982,
    8983, 8984,
    8985, 8986, 8987, 8988, 8990, 8998, 9002, 9004, 9005, 9009, 9010, 9015,
    9046, 9047, 9050, 9055, 9056, 9057, 9058, 9079, 9084, 9090, 9091, 9138,
    9139, 9140, 9141, 9169, 9171, 9172, 9179, 9180, 9182, 9197, 9198, 9201,
    9202, 9204, 9209, 9245, 9246, 9247, 9249, 9250, 9251, 9252, 9276, 9279,
    9282, 9285,
    9346, 9349, 9496, 9497, 9498, 9499, 9579, 9588, 9593, 9594, 9595, 9596,
    9598, 9600, 9660, 9668, 9674, 9676, 9685, 9686, 9687, 9688, 9689, 9692,
    9693, 9696, 9697, 9724, 9727, 9728, 9742, 9757, 9765, 9767, 9768, 9769,
    9770, 9771, 9773, 9785, 9786, 9794, 9871, 9872, 9873, 9875, 9884, 9885,
    9886, 9887,
    9942, 9944, 9950, 9960, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975,
    9983, 9984, 10049, 10050, 10051, 10054, 10065, 10067, 10069, 10074, 10075,
    10076, 10077, 10080, 10081, 10113, 10114, 10117, 10126, 10146, 10147, 10151,
    10155, 10156, 10157, 10158, 10162, 10166, 10173, 10174, 10262, 10264, 10265,
    10266, 10272, 10273, 10274, 10275,
    10333, 10335, 10336, 10337, 10359, 10361, 10362, 10363, 10369, 10370, 10372,
    10440, 10441, 10443, 10458, 10459, 10460, 10462, 10463, 10464, 10465, 10467,
    10469, 10470, 10506, 10507, 10508, 10509, 10537, 10540, 10543, 10544, 10545,
    10546, 10555, 10556, 10560, 10562, 10567, 10656, 10657, 10658, 10659, 10661,
    10662, 10663, 10737, 10738, 10739, 10740,
    10754, 10755, 10756, 10758, 10760, 10801, 10802, 10803, 10804, 10834, 10836,
    10837, 10851, 10853, 10898, 10899, 10901, 10931, 10934
  };

  static const int mat_ptr_indices[] = {
    0, 2, 16, 0, 2, 18, 3, 4, 16, 18, 6, 19, 4, 6, 7, 20, 0, 21, 2, 3, 28, 20,
    16, 21, 29, 18, 19, 23, 28, 4, 29, 6, 7, 10, 20, 9, 21, 23, 10, 28, 9, 29,
    11, 9, 10, 11, 0, 2, 16, 0, 2, 18, 3, 4, 16, 18, 6, 19, 4, 6, 7, 0, 2, 3,
    20, 16, 0, 2, 18, 3, 19, 28, 20, 4, 16, 18, 6, 19, 23, 7, 28, 4, 6, 7, 24,
    25, 20, 21, 2, 0, 3, 23, 32, 24, 25, 33, 10, 28, 20, 29, 21, 18, 16, 19, 23,
    32, 33, 10, 28, 29, 6, 4, 7, 11, 38, 24, 37, 25, 10, 9, 21, 20, 23, 11, 38,
    32, 37, 33, 10, 9, 29, 28, 11, 37, 38, 10, 9, 11, 0, 2, 3, 24, 16, 2, 0, 18,
    3, 19, 32, 24, 4, 18, 16, 6, 19, 7, 32, 6, 4, 7, 24, 25, 20, 21, 0, 2, 3,
    23, 38, 32, 24, 33, 25, 28, 20, 29, 21, 16, 18, 19, 23, 38, 32, 33, 28, 29,
    4, 6, 7, 14, 13, 38, 37, 25, 24, 10, 9, 20, 21, 23, 11, 14, 13, 38, 37, 33,
    32, 10, 9, 28, 29, 11, 13, 14, 38, 37, 9, 10, 11, 24, 25, 2, 0, 3, 14, 32,
    24, 33, 25, 18, 16, 19, 14, 32, 33, 6, 4, 7, 14, 13, 38, 37, 24, 25, 20, 23,
    21, 14, 13, 38, 37, 32, 33, 28, 29, 14, 13, 37, 38, 10, 11, 9, 14, 13, 24,
    25, 14, 13, 32, 33, 13, 14, 38, 37, 0, 2, 16, 0, 2, 18, 3, 4, 16, 18, 6, 19,
    4, 6, 7, 0, 2, 3, 20, 16, 2, 18, 0, 3, 19, 28, 20, 4, 18, 6, 16, 19, 23, 7,
    28, 6, 4, 7, 40, 42, 41, 20, 2, 21, 0, 3, 23, 44, 40, 42, 46, 41, 45, 43,
    10, 28, 20, 18, 29, 16, 19, 23, 21, 44, 46, 45, 47, 10, 28, 6, 4, 7, 29, 11,
    48, 50, 40, 49, 41, 42, 43, 10, 9, 20, 21, 23, 11, 48, 50, 44, 49, 45, 46,
    47, 51, 10, 28, 29, 11, 9, 48, 49, 50, 51, 10, 9, 11, 2, 0, 3, 40, 42, 24,
    18, 2, 0, 3, 16, 19, 44, 40, 42, 46, 43, 32, 24, 6, 18, 16, 19, 4, 7, 44,
    46, 47, 32, 6, 4, 7, 40, 42, 41, 24, 25, 2, 3, 21, 20, 0, 23, 43, 48, 50,
    44, 40, 42, 46, 45, 41, 43, 38, 32, 24, 33, 20, 23, 18, 19, 21, 29, 25, 28,
    16, 47, 48, 50, 44, 46, 45, 47, 51, 38, 32, 28, 6, 7, 29, 33, 4, 52, 54, 53,
    48, 50, 49, 42, 41, 40, 43, 38, 37, 24, 25, 10, 23, 21, 9, 20, 11, 51, 52,
    54, 53, 48, 50, 49, 46, 45, 44, 47, 51, 38, 32, 33, 10, 11, 9, 29, 37, 28,
    52, 53, 54, 50, 49, 48, 51, 38, 37, 10, 11, 9, 40, 42, 41, 43, 25, 2, 3, 0,
    24, 52, 54, 44, 42, 40, 46, 45, 41, 43, 47, 14, 24, 25, 33, 18, 19, 16, 32,
    52, 54, 46, 44, 45, 47, 14, 32, 33, 6, 7, 4, 52, 54, 53, 48, 50, 49, 40, 41,
    42, 43, 51, 14, 13, 38, 25, 37, 23, 20, 21, 24, 52, 54, 53, 50, 48, 49, 44,
    45, 46, 47, 51, 14, 38, 37, 33, 13, 28, 29, 32, 54, 53, 52, 48, 49, 50, 51,
    14, 13, 38, 37, 10, 11, 9, 2, 0, 3, 40, 42, 18, 2, 3, 0, 16, 19, 44, 40, 42,
    46, 43, 6, 18, 19, 16, 4, 7, 44, 46, 47, 6, 7, 4, 40, 42, 41, 3, 2, 0, 20,
    23, 21, 43, 48, 50, 44, 42, 46, 40, 45, 43, 41, 23, 20, 19, 21, 18, 16, 28,
    29, 47, 48, 50, 46, 44, 47, 45, 51, 28, 7, 29, 6, 4, 56, 58, 57, 48, 50, 42,
    49, 40, 41, 43, 10, 23, 21, 20, 11, 9, 51, 56, 58, 57, 59, 50, 48, 46, 44,
    45, 47, 51, 49, 10, 11, 9, 29, 28, 56, 57, 58, 59, 50, 48, 49, 51, 11, 10,
    9, 42, 41, 40, 24, 3, 2, 0, 43, 25, 56, 58, 52, 54, 46, 42, 40, 43, 41, 45,
    44, 24, 25, 32, 19, 18, 16, 47, 33, 56, 58, 59, 52, 54, 46, 44, 47, 45, 32,
    33, 7, 6, 4, 56, 58, 57, 52, 54, 53, 50, 42, 43, 41, 49, 48, 38, 25, 24, 23,
    20, 21, 40, 51, 37, 59, 42, 40, 3, 2, 0, 43, 41, 56, 58, 46, 42, 43, 40, 41,
    44, 19, 18, 16, 47, 45, 56, 58, 59, 46, 47, 44, 45, 7, 6, 4, 56, 58, 57, 50,
    43, 42, 41, 40, 48, 23, 20, 21, 51, 49, 59, 52, 54, 53, 42, 40, 43, 41, 14,
    13, 24, 25, 56, 58, 57, 59, 54, 52, 50, 48, 51, 46, 47, 49, 45, 53, 38, 37,
    33, 32, 28, 29, 44, 54, 52, 53, 46, 44, 47, 45, 14, 13, 32, 33, 58, 57, 56,
    59, 54, 52, 53, 50, 51, 49, 38, 37, 11, 10, 9, 48, 52, 53, 54, 50, 48, 51,
    49, 14, 13, 38, 37, 14, 13, 59, 58, 56, 57, 58, 56, 43, 42, 40, 41, 59, 57,
    58, 57, 56, 54, 52, 43, 42, 40, 41, 24, 25, 59, 53, 56, 58, 57, 59, 54, 53,
    42, 43, 40, 41, 52, 14, 24, 25, 13, 58, 59, 56, 57, 47, 46, 44, 45, 58, 56,
    59, 57, 50, 51, 48, 47, 49, 46, 45, 44, 28, 29, 58, 56, 59, 57, 54, 52, 53,
    47, 46, 44, 45, 32, 33, 58, 56, 57, 59, 54, 52, 53, 46, 47, 44, 45, 14, 13,
    32, 33, 59, 58, 57, 56, 51, 50, 48, 49, 58, 56, 57, 59, 51, 50, 49, 48, 11,
    10, 9, 58, 59, 57, 54, 53, 52, 51, 50, 48, 49, 38, 37, 56, 56, 57, 58, 59,
    54, 53, 50, 51, 48, 49, 14, 13, 38, 37, 52, 59, 58, 56, 57, 54, 52, 53, 58,
    59, 56, 57, 54, 52, 53, 14, 13, 58, 56, 59, 57, 54, 52, 53, 14, 13, 54, 52,
    53, 14, 13
  };

  // Action = w.
  // Quotient ring basis (V) =
  //   1, x, x*w, x*w^2, y, y*z, y*w, y*w^2, z, z^2, z*w, z*w^2,
  //   w, w^2, w^3, w^4.
  // Available monomials (RR*V) =
  //   x*w^3, y*z*w, y*w^3, z^2*w, z*w^3, w^5, 1, x, x*w, x*w^2, y, y*z, y*w,
  //   y*w^2, z, z^2, z*w, z*w^2, w, w^2, w^3, w^4.

  // Construct elimination template.
  const double* mat_ptr = coeff_mat.data();
  MatrixXd C = MatrixXd::Zero(97, 113);

  for (int i = 0; i < 1069; ++i) {
    C(C_ind[i]) = mat_ptr[mat_ptr_indices[i]];
  }

  const MatrixXd C12 = C.leftCols(97).fullPivLu().solve(C.rightCols(16));
  MatrixXd RR(22, 16);
  RR << -C12.bottomRows(6), MatrixXd::Identity(16, 16);

  // Build action matrix.
  static const int AM_ind[] = {
    18, 8, 9, 0, 12, 1, 13, 2, 16, 3, 17, 4, 19, 20, 21, 5
  };
  MatrixXd AM(16, 16);
  for (int i = 0; i < 16; ++i) {
    AM.row(i) = RR.row(AM_ind[i]);
  }

  // Solve for variables.
  Eigen::EigenSolver<MatrixXd> eigen_solver(AM);
  Eigen::ArrayXcd D = eigen_solver.eigenvalues();
  Eigen::ArrayXXcd V = eigen_solver.eigenvectors();
  V = (V / V.row(0).replicate(16, 1)).eval();

  MatrixXcd sols(4, 16);
  sols.row(0) = V.row(1);
  sols.row(1) = V.row(4);
  sols.row(2) = V.row(8);
  sols.row(3) = D.transpose();

  return sols;
}

}  // namespace msft
